/**
 * @param {NSMutableArray} array
 * @param {Number} atIndex
 * @param {Number} toIndex
 * @returns {NSMutableArray}
 */

function moveObject(array, atIndex, toIndex) {
  if (atIndex != toIndex) {
    var object = [[[array objectAtIndex:atIndex] retain] autorelease]

    [array removeObjectAtIndex:atIndex]
    [array insertObject:object atIndex:toIndex]
  }

  return array
}



/**
 * Sets `isSelected` to `true` for all given layers
 * @param {NSArray.<MSShapeGroup>} layers
 */

function restoreSelection(layers) {
  var loop = [layers objectEnumerator]

  while (layer = [loop nextObject]) {
    [layer setIsSelected:true]
  }
}



/**
 * Makes `NSApp sendAction` for `layer` `times` times
 * @param {NSDictionary} context
 * @param {String} action
 * @param {MSShapeGroup} layer
 * @param {Number} times
 */

function sendActionTimes(context, action, object, times) {
  var doc = context.document

  [[doc currentPage] deselectAllLayers]
  [object setIsSelected:true]

  for (var i = 0; i < times; i++) {
    [NSApp sendAction:action to:nil from:doc]
  }

  restoreSelection(context.selection)
}



/**
 * Returns layers sorted by first number in name
 * @param {NSArray.<MSShapeGroup>} layers
 * @returns {NSArray.<MSShapeGroup>}
 */

function sortLayers(layers, isAscending) {
  var sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:'name'
                                         ascending:isAscending
                                         selector:'localizedStandardCompare:']

  return [layers sortedArrayUsingDescriptors:[sortDescriptor]]
}



/**
 * @typedef {Object} StepsStruct
 * @property {MSShapeGroup} layer
 * @property {Number} steps
 */

/**
 * Returns the quantity of steps that needed to reorder `layers`
 * in according to order of `sortedLayers`
 * @param {NSArray.<MSShapeGroup>} selection
 * @param {NSArray.<MSShapeGroup>} sortedLayers
 * @returns {Array.<StepsStruct>}
 */

function getSteps(selection, sortedLayers) {
  var steps = []
  var selectedLayers = [selection mutableCopy]

  for (var i = 0; i < [sortedLayers count]; i++) {
    var layer = [sortedLayers objectAtIndex:i]
    var index = [selectedLayers indexOfObject:layer]

    steps.push({ layer: layer, steps: index - i })

    selectedLayers = moveObject(selectedLayers, index, i)
  }

  return steps
}



/**
 * @param {NSArray.<MSShapeGroup>} selection
 * @returns {String}
 */

function getObjectName(selection) {
  var object = [selection firstObject]

  switch ([object class]) {
    case [MSShapeGroup class]:
      return 'layers'
    case [MSArtboardGroup class]:
      return 'artboards'
    default:
      return 'objects'
  }
}
