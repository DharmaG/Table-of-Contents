
@import "library.cocoascript";

var onRun = function(context) {
  var sketch = context.api();
  var document = sketch.selectedDocument;
  var doc = context.document;       // the current document (MSDocument)
  var plugin = context.plugin;    // the plugin (MSPluginBundle)
  var page = [doc currentPage];   // the current page (MSPage)
  var artboards = doc.currentPage().artboards();
  var numberArtboard = artboards.length;

  // Prompt Dialog
  if(numberArtboard > 2) {
    var t = artboards[numberArtboard-2];
    if([t name] == "Table of Contents") {
      showCheckWindow(doc, plugin, page, artboards, numberArtboard, context, document);
    }
    else {
      addTableOfContents(doc, plugin, page, artboards, numberArtboard, context, document);
    }
  }
}

function showCheckWindow(doc, plugin, page, artboards, numberArtboard, context, document) {
  var alertWindow = COSAlertWindow.new()
  alertWindow.setMessageText('Do you want to refresh or delete your Table of Contents?')

  alertWindow.addButtonWithTitle('Refresh')
  alertWindow.addButtonWithTitle('Delete')


  if (alertWindow.runModal() == -NSModalResponseStop) {
    deleteTableOfContents(artboards);
    var a = doc.currentPage().artboards();
    var n = a.length;
    addTableOfContents(doc, plugin, page, a, n, context, document);
    [doc showMessage: "Table of Contents refreshed."]

  } else {
    deleteTableOfContents(artboards);
    [doc showMessage: "Table of Contents deleted."]
  }
}

function showAlertWindow() {
  var alertWindow = COSAlertWindow.new()
  // Checkbox
  var regexpRename = regexpRename || {};

  regexpRename.createCheckbox = function ( label, value, flag ) {
    flag = ( flag == false ) ? NSOffState : NSOnState;
    var checkbox = NSButton.alloc().initWithFrame( NSMakeRect( 0, 0, 300, 18 ) );
    checkbox.setButtonType( NSSwitchButton );
    checkbox.setTitle( label );
    checkbox.setTag( value );
    checkbox.setState( flag );
    return checkbox;
  }

  alertWindow.setMessageText('Create Table of Contents')

  alertWindow.addTextLabelWithValue('Enter background color')
  alertWindow.addTextFieldWithValue('#3C96C7') 

  alertWindow.addTextLabelWithValue('Enter margin between contents')
  alertWindow.addTextFieldWithValue('20')

  alertWindow.addTextLabelWithValue('Enter contents font size')
  alertWindow.addTextFieldWithValue('20')

  alertWindow.addAccessoryView( regexpRename.createCheckbox( 'Add numbers to title', 'a', true ) )
  alertWindow.addAccessoryView( regexpRename.createCheckbox( 'Show page numbers', 's', true ) )

  alertWindow.addButtonWithTitle('OK')
  alertWindow.addButtonWithTitle('Cancel')

  if (alertWindow.runModal() == -NSModalResponseStop) {
//     [doc showMessage: "Table of Contents created."]
      return new UserInput(
          alertWindow.viewAtIndex(1).stringValue(),
          alertWindow.viewAtIndex(3).stringValue(),
          alertWindow.viewAtIndex(5).stringValue(),
          alertWindow.viewAtIndex(6).state(),
          alertWindow.viewAtIndex(7).state()
      )
  } else {
      return null
  }
}

// Dialog Results
function UserInput(color, margin, fsize, titleN, pageN) {
    this.color = color
    this.margin = margin
    this.fsize = fsize
    this.titleN = titleN
    this.pageN = pageN
}

function deleteTableOfContents(a){
  var n = a.length
    a[n-2].removeFromParent();
    for(var i = 0; i < n-2; i++) {
      var temp = a[i];
      var l = (temp.children().toString().match(/</g) || []).length;
      
      for(var j = 0; j < l; j++) {
        if(temp.children()[j].name() == "Page Number") {
          temp.children()[j].removeFromParent();
          break;
        }
      }
    }
}

function addTableOfContents(doc, plugin, page, artboards, numberArtboard, context, document) {
      var userInput = showAlertWindow();
      if(userInput != null) {
        // Create New Artboard
        var currentPage = document.selectedPage
        var firstArtboard = artboards[numberArtboard-2];
        newArtboardWidth = [[firstArtboard frame] width]
        newArtboardHeight = [[firstArtboard frame] height]
        newArtboardX = [[firstArtboard frame] x]
        newArtboardY = [[firstArtboard frame] y] - (newArtboardHeight + 300)
        
        var newArtboardc = currentPage.newArtboard({"name" : "Table of Contents"})
        
        var view = [doc currentView];
        artboards = doc.currentPage().artboards()  
        var selected_artboard = artboards[numberArtboard];
        
        var newArtboardFrame = [selected_artboard frame]
        
        [newArtboardFrame setWidth:newArtboardWidth]
        [newArtboardFrame setHeight:newArtboardHeight]
        [newArtboardFrame setX:newArtboardX]
        [newArtboardFrame setY:newArtboardY]
  
        // Create Background Rect
        var shape = MSShapeGroup.shapeWithPath(MSRectangleShape.alloc().initWithFrame(NSMakeRect(0, 0, newArtboardWidth,newArtboardHeight)));
        shape.style().addStylePartOfType(0).setColor(MSImmutableColor.colorWithSVGString(userInput.color).newMutableCounterpart());
        shape.setName("background");

        var text = MSTextLayer.new();
        text.setName("Table of Contents");
        text.frame().setX(100);
        text.frame().setY(100);
        text.setStringValue("Table of Contents");
        text.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans Light Italic", 44));
        text.setTextColor(MSImmutableColor.colorWithSVGString("#ffffff").newMutableCounterpart());
        text.adjustFrameToFit();
        selected_artboard.addLayers([shape,text]);

        var count = 0;
        var add = 0;
        var k = 1;
        
        // Create contents with all artboard names
        for(var i = 1; i < artboards.length-1; i++) {
          var temp = artboards[numberArtboard-1-i];
          var l = (temp.children().toString().match(/</g) || []).length;

          if(l <= 1) ;
          else if(temp.children()[l-2].toString().split("Header")[1] == null) ;
          else {

            var header = temp.children()[l-2].toString().split("Header")[1].split(" ")[0];
            var title = temp.children()[l-2].overrides().toString().split('" = "')[1].split('"')[0];
            var page = parseInt(i)+2;

            if(header == 2 && userInput.pageN == 1) {
                var pnumberLayer = MSTextLayer.new();
                pnumberLayer.setName("Page Number");
                pnumberLayer.frame().setX(newArtboardWidth-50);
                pnumberLayer.frame().setY(newArtboardHeight-50);
                pnumberLayer.setStringValue(page+"");
                pnumberLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans Light", 16));
                pnumberLayer.setTextColor(MSImmutableColor.colorWithSVGString("#484848").newMutableCounterpart());
                pnumberLayer.adjustFrameToFit();
                temp.addLayers([pnumberLayer]);
            }

            if(title.indexOf("cont") > -1) ;
            else {
              if(header == 2 && count != 0) {
                var titleNumber = count + "." + k + " ";
                if(userInput.titleN == 0) {
                  titleNumber = "-";
                }
                var textLayer = MSTextLayer.new();
                textLayer.setName(title);
                textLayer.setStringValue("    " + titleNumber + title);
                textLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
                selected_artboard.addLayers([textLayer]);

                k++
              } else {
                count++;
                var titleNumber = count + ". ";
                if(userInput.titleN == 0) {
                  titleNumber = "";
                }

                var textLayer = MSTextLayer.new();
                textLayer.setName(title);
                textLayer.setStringValue(titleNumber + title);
                textLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
                selected_artboard.addLayers([textLayer]);

                k = 1;
              }
              if(userInput.pageN == 1) {
                var numberLayer = MSTextLayer.new();
                numberLayer.setName(page+"");
                numberLayer.setStringValue(page+"");
                numberLayer.addAttribute_value(NSFontAttributeName, NSFont.fontWithName_size("Fira Sans", userInput.fsize));
                selected_artboard.addLayers([numberLayer]);
              }

              // set content position
              textLayer.frame().setX(100 + 500*parseInt(add/15));
              textLayer.frame().setY(100+(add%15)*(24+parseInt(userInput.margin)) + 120);
              textLayer.setTextColor(MSImmutableColor.colorWithSVGString("#FFF").newMutableCounterpart());

              if(userInput.pageN == 1) {
                numberLayer.frame().setX(500 + 500*parseInt(add/15));
                numberLayer.frame().setY(100+(add%15)*(24+parseInt(userInput.margin)) + 120);
                numberLayer.setTextColor(MSImmutableColor.colorWithSVGString("#FFF").newMutableCounterpart());
              }

              add++;
            }
          }
        }

        artboards = doc.currentPage().artboards()
        
        var selection = [artboards subarrayWithRange:NSMakeRange(numberArtboard-1,2)];
        var moveBack = sendActionTimes.bind(null, context, 'moveBackward:')
        getSteps(selection, sortLayers(selection, false))
          .forEach(function(steps) {
            moveBack(steps.layer, steps.steps)
          })

        var view = [doc currentView];
        artboards = doc.currentPage().artboards()  
        var selected_artboard = artboards[numberArtboard-1];
        [selected_artboard select:true byExpandingSelection:false];
        [view zoomToSelection];
      }
}
